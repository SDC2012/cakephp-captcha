{"name":"Cakephp Captcha","tagline":"Captcha implementation for CakePHP 2.2+","body":"# Captcha support for CakePHP 2.2+\r\n\r\nGenerates an image with random alphanumeric characters which requires a human to validate.  This is to prevent automated spam and spam bots.\r\n\r\nFeatures:\r\n\r\n+ Random alphanumeric text\r\n+ Supports rotation of text\r\n+ The image width and height dimensions can be set\r\n+ The font size can be adjusted\r\n+ Random monospace fonts are used during generation (anonymous, droidsans, ubuntu)\r\n+ Multiple captchas allowed per form\r\n\r\n## Demonstration\r\n\r\n[captcha.baselocker.com](http://captcha.baselocker.com)\r\n\r\n## Requirements\r\n\r\n+ PHP version: 5.2+\r\n+ CakePHP version: 2.0+\r\n\r\n## Installation\r\n\r\nClone or download the component:\r\n\r\n    git clone git://github.com/donovan-duplessis/cakephp-captcha.git\r\n\r\nCopy the component and behavior into your framework at:\r\n\r\n    cd cakephp-captcha\r\n    cp Controller/Component/CaptchaComponent.php <your-app>/app/Controller/Component/\r\n    cp Model/Behavior/CaptchaBehavior.php <your-app>/app/Model/Behavior/\r\n\r\nCopy the fonts into your framework at:\r\n\r\n    cp -R Lib/Fonts <your-app>/app/Lib/\r\n    chmod 755 <your-app>/app/Lib/Fonts\r\n\r\nGD library needs to be installed for PHP (for dynamic image creation):\r\n\r\nUbuntu\r\n\r\n    sudo apt-get install php5-gd\r\n\r\nMac OSX (MacPorts)\r\n\r\n    sudo port install php5-gd\r\n\r\n## Errors\r\n\r\ne.g. \"Call to undefined function imagecreatetruecolor ()\"\r\n\r\nInstall php5-gd library as described above\r\n\r\n## Usage\r\n\r\nInclude Captcha behavior in model:<br/>\r\n\r\n    public $actsAs = array('Captcha');\r\n\r\nInclude Captcha component in controller:\r\n\r\n    public $components = array('Captcha');\r\n\r\nTo output the captcha image from controller:\r\n\r\n    $this->Captcha->generate();\r\n\r\n## Reload image\r\n\r\nRefer to sample code (mostly in contacts index view) which refreshes the captcha image via jQuery.\r\n\r\n## Authentication\r\n\r\nIf you are using the authentication component, ensure that the captcha action (that generates the image) is granted access.\r\n\r\n## Sample Code\r\n\r\nModel Contact.php\r\n\r\n    <?php\r\n    App::uses('AppModel', 'Model');\r\n    class Contact extends AppModel {\r\n        public $actsAs = array(\r\n            'Captcha' => array(\r\n                'field' => array('captcha', 'captcha-2'),\r\n                'error' => 'Captcha code entered invalid'\r\n            )\r\n        );\r\n    }\r\n    ?>\r\n\r\nController ContactsController.php\r\n\r\n    <?php\r\n    App::uses('AppController', 'Controller');\r\n    class ContactsController extends AppController {\r\n        public $captchas = array('captcha', 'captcha-2');\r\n\r\n        public $components = array(\r\n            'Captcha' => array(\r\n                'rotate' => true\r\n            ),\r\n            'RequestHandler'\r\n        );\r\n\r\n        public function captcha()  {\r\n            $this->autoRender = false;\r\n            $captcha = basename($this->params['url']['url'], '.jpg');\r\n            $this->Captcha->generate($captcha);\r\n        }\r\n\r\n        public function index() {\r\n            if ($this->RequestHandler->isPost()) {\r\n                foreach($this->captchas as $field) {\r\n                    $this->Contact->setCaptcha($field,\r\n                        $this->Captcha->getCode($field));\r\n                };\r\n                $this->Contact->set($this->request->data);\r\n                if ($this->Contact->validates()) {\r\n                    $this->Session->setFlash('Captcha codes validated successfully',\r\n                        'flash_good');\r\n                }\r\n            }\r\n            $this->set('captcha_fields', $this->captchas);\r\n        }\r\n    }\r\n    ?>\r\n\r\nRoute Config/routes.php\r\n\r\n    Router::connect('/img/captcha.jpg', array('controller' => 'contacts', 'action' => 'captcha'));\r\n    Router::connect('/img/captcha-2.jpg', array('controller' => 'contacts', 'action' => 'captcha'));\r\n\r\nView Contacts/index.ctp\r\n\r\n    <?php\r\n        echo $this->Form->create('Contact');\r\n        foreach($captcha_fields as $index => $captcha) {\r\n            echo $this->Html->image($captcha . '.jpg', array('id' => $captcha));\r\n            echo $this->Html->link('reload image &#x21bb;', '#', array('class' => 'reload', 'escape' => false));\r\n            echo $this->Form->input($captcha, array('label' => 'Captcha', 'value' => '', 'tabindex' => $index + 1)); \r\n        }\r\n        echo $this->Form->end('Submit');\r\n    ?>\r\n\r\n## License\r\n\r\nLicensed under The MIT License<br/>\r\nRedistributions of files must retain the above copyright notice.\r\n\r\n## Copyright\r\n\r\nCopyright (C) Donovan du Plessis, donovan@binarytrooper.com\r\n\r\n## Contributors\r\n\r\nAdriano Lu√≠s Rocha (ALR), [adrianlouis](https://github.com/adrianoluis)\r\n\r\n## Changelog\r\n\r\n##### 1.6 [Jun 04, 2014]\r\n* Add support for multiple captchas per form (mubasshir request)\r\n\r\n##### 1.5 [Aug 05, 2013]\r\n* Add reload captcha image implementation to contacts sample code\r\n\r\n##### 1.4 [Jun 19, 2013]\r\n* Add initialize method to component to set correct image response type and body\r\n* Refactor readme document and script comments\r\n\r\n##### 1.3 [Oct 25, 2012]\r\n* Set font path to Lib/Fonts (ALR)\r\n* Access Model reference correctly in Behavior (ALR)\r\n\r\n##### 1.2 [Oct 17, 2012]\r\n* Set component and behavior to framework 2.0 compliant (ALR)\r\n\r\n##### 1.1 [Apr 18, 2012]\r\n* Add character limit configuration to component\r\n* Initial default configuration settings in Behavior\r\n* Refactor code and readme document\r\n\r\n##### 1.0 [Mar 29, 2012]\r\n* Initial Version\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}